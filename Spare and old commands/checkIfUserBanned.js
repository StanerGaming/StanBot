const { SlashCommandBuilder } = require('discord.js');
const Axios = require(`axios`);
const botinfo = require("D:/StanBot/src/botinfo.json");
const Noblox = require('noblox.js');
let banTime = "0";

function secondsToDhms(seconds) {
    seconds = Number(seconds)
    var d = Math.floor(seconds / (3600 * 24))
    var h = Math.floor((seconds % (3600 * 24)) / 3600)
    var m = Math.floor((seconds % 3600) / 60)
    var s = Math.floor(seconds % 60)
    var dDisplay = d > 0 ? d + (d == 1 ? " day, " : " days, ") : ""
    var hDisplay = h > 0 ? h + (h == 1 ? " hour, " : " hours, ") : ""
    var mDisplay = m > 0 ? m + (m == 1 ? " minute, " : " minutes, ") : ""
    var sDisplay = s > 0 ? s + (s == 1 ? " second" : " seconds") : ""
    return dDisplay + hDisplay + mDisplay + sDisplay
  }

module.exports = {
    data: new SlashCommandBuilder()
        .setName('checkifuserbanned')
        .setDescription('checks if a banned is user from a roblox game')
        .addIntegerOption(option => 
            option
            .setName('target')
            .setDescription('who to search for to ban :devil:')
            .setRequired(true)),
        

    async execute(interaction, client){
        const message = await interaction.deferReply({
            fetchReply: true
        });
        const usertoSearchFor = interaction.options.getInteger('target')
        const reasonForBan = interaction.options.getString('reason')
        
        const modID = interaction.member.id;
        //Don't need to get mod username 
      /*  async function callApi() {
            const response = await fetch(`https://api.blox.link/v4/public/guilds/954883852973789265/discord-to-roblox/${modID}`, { headers: { "Authorization": `${botinfo.ModeratorID}` } });
            const data = await response.json();
          
            return data;
          }

          let data = await callApi();
          let Moderators = ["335172130", "1071899552", "1527016459", "191976285"];
          let RobloxID = data.robloxID;
          let ModeratorID = await Noblox.getUsernameFromId(RobloxID);
          console.log(data.robloxID);*/

          let UserName = await Noblox.getUsernameFromId(usertoSearchFor);
          const BanInfo = [usertoSearchFor, reasonForBan/*, ModeratorID*/];

     

        if (interaction.member.roles.cache.has('1039289552302514257')){ 
            //if (Moderators.includes(RobloxID)){
               
           
                const response =await Axios.get(`https://apis.roblox.com/cloud/v2/universes/${botinfo.Roblox_Token}/user-restrictions/${usertoSearchFor}`, {
            headers:{
            'x-api-key': botinfo.Roblox_Key
            }
            
            }
    ).then(response => (
        //gally is Response generated by axios request.
             gally = response.data,
            console.log(response.data)
            
            
        ))
        // If user doesn't have an update time AND he's not banned
        if (!(gally.hasOwnProperty("updateTime")) && gally.gameJoinRestriction.active == false){
             banTime  = "Not banned" ;
       } //If the user is banned permanently
       else if (!(gally.gameJoinRestriction.hasOwnProperty("duration")) && gally.gameJoinRestriction.active == true){
            banTime = "Permanent"
       } //If the user is banned temporarily
       else{
        let time = gally.gameJoinRestriction.duration;
        let newtime = time.replace('s', '');
        banTime = (secondsToDhms(newtime))
       }
        const newMessage = `Signal Sent,
         \nUser ID: ${usertoSearchFor}, \nUsername: ${UserName}, \nBanned: ${gally.gameJoinRestriction.active}, \nPrivate Reason: ${gally.gameJoinRestriction.privateReason},\nReason shown to user: ${gally.gameJoinRestriction.displayReason}, \nAlt accounts not banned: ${gally.gameJoinRestriction.excludeAltAccounts}
Ban Time: ${banTime}`
        await interaction.editReply({
            
            content:newMessage
        });
            //}
           /* else{ 
                const newMessage = `Not a moderator, what a noob lol`
            await interaction.editReply({
                content:newMessage
            });}*/
            
           
            }
            else{
                const newMessage = `Access to this command is restricted`
                await interaction.editReply({
                    content:newMessage
                });
            }
    
    }


}